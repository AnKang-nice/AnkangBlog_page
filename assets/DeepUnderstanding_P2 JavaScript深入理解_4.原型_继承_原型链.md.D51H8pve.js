import{_ as s,c as i,a4 as t,o as n}from"./chunks/framework.vOILIgLK.js";const c=JSON.parse('{"title":"原型 & 继承 & 原型链","description":"","frontmatter":{},"headers":[],"relativePath":"DeepUnderstanding/P2 JavaScript深入理解/4.原型&继承&原型链.md","filePath":"DeepUnderstanding/P2 JavaScript深入理解/4.原型&继承&原型链.md"}'),e={name:"DeepUnderstanding/P2 JavaScript深入理解/4.原型&继承&原型链.md"};function p(h,a,l,r,k,o){return n(),i("div",null,a[0]||(a[0]=[t(`<h1 id="原型-继承-原型链" tabindex="-1">原型 &amp; 继承 &amp; 原型链 <a class="header-anchor" href="#原型-继承-原型链" aria-label="Permalink to &quot;原型 &amp; 继承 &amp; 原型链&quot;">​</a></h1><p>:::tips 仅作为自我知识理解记录，可能会有错误遗漏，请批判性阅读 :::</p><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h2><p>原型是一个对象</p><p>每个对象都有自己的隐式原型<code>__proto__</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Object { ... }</span></span></code></pre></div><p>每个构造函数（函数）都有自己的的原型对象<code>prototype</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Person { ... }</span></span></code></pre></div><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2><h3 id="继承的方式" tabindex="-1">继承的方式 <a class="header-anchor" href="#继承的方式" aria-label="Permalink to &quot;继承的方式&quot;">​</a></h3><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><h2 id="常用方法-操作符" tabindex="-1">常用方法&amp;操作符 <a class="header-anchor" href="#常用方法-操作符" aria-label="Permalink to &quot;常用方法&amp;操作符&quot;">​</a></h2><p>in</p><p>instanceof</p><p>isPrototypeOf</p><p>hasOwnProperty</p><p>hasOwnPrototypeOf</p>`,17)]))}const E=s(e,[["render",p]]);export{c as __pageData,E as default};
