import{_ as l,c as p,j as i,a,G as t,w as e,a4 as h,B as r,o}from"./chunks/framework.vOILIgLK.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"TutorialRecord/项目/sass升级处理&问题记录/1.记录我们vue3项目sass升级.md","filePath":"TutorialRecord/项目/sass升级处理&问题记录/1.记录我们vue3项目sass升级.md"}'),k={name:"TutorialRecord/项目/sass升级处理&问题记录/1.记录我们vue3项目sass升级.md"};function d(E,s,c,u,g,y){const n=r("font");return o(),p("div",null,[s[15]||(s[15]=i("blockquote",null,[i("p",null,"只针对我们项目中的告警，破坏性更新挺多的，当遇到问题后再查官网解决")],-1)),s[16]||(s[16]=i("h2",{id:"升级原因",tabindex:"-1"},[a("升级原因 "),i("a",{class:"header-anchor",href:"#升级原因","aria-label":'Permalink to "升级原因"'},"​")],-1)),s[17]||(s[17]=i("p",null,[a("sass官网的解释："),i("a",{href:"https://sass-lang.com/documentation/breaking-changes/import/",target:"_blank",rel:"noreferrer"},"https://sass-lang.com/documentation/breaking-changes/import/")],-1)),i("blockquote",null,[s[5]||(s[5]=i("p",null,[a("Originally, Sass used "),i("code",null,"@import"),a(" rules to load other files with a single global namespace, with all built-in functions also available globally. We’re deprecating both Sass "),i("code",null,"@import"),a(" rules and global built-in functions now that the module system ("),i("code",null,"@use"),a(" and "),i("code",null,"@forward"),a(" rules) has been available for several years.")],-1)),t(n,{style:{color:"rgb(36, 43, 52)"}},{default:e(()=>s[0]||(s[0]=[a("最初，Sass 使用 @import 规则以单个全局命名空间加载其他文件，所有内置函数也在全局范围内可用。 现在，模块系统（@use 和 @forward 规则）已经可用了好几年，我们正在淘汰 Sass 的")])),_:1}),s[6]||(s[6]=a("**")),t(n,{style:{color:"rgb(36, 43, 52)"}},{default:e(()=>s[1]||(s[1]=[a(" @import 规则")])),_:1}),s[7]||(s[7]=a("**")),t(n,{style:{color:"rgb(36, 43, 52)"}},{default:e(()=>s[2]||(s[2]=[a("和")])),_:1}),s[8]||(s[8]=a("**")),t(n,{style:{color:"rgb(36, 43, 52)"}},{default:e(()=>s[3]||(s[3]=[a("全局内置函数")])),_:1}),s[9]||(s[9]=a("**")),t(n,{style:{color:"rgb(36, 43, 52)"}},{default:e(()=>s[4]||(s[4]=[a("。")])),_:1})]),s[18]||(s[18]=i("h3",{id:"import",tabindex:"-1"},[a("@import "),i("a",{class:"header-anchor",href:"#import","aria-label":'Permalink to "@import"'},"​")],-1)),s[19]||(s[19]=i("p",null,[i("img",{src:"https://cdn.nlark.com/yuque/0/2025/png/26456403/1744270575418-f15c2311-d065-4e27-8131-107a2212f881.png",alt:"","data-fancybox":"gallery",loading:"lazy"})],-1)),i("blockquote",null,[i("p",null,[s[13]||(s[13]=i("code",null,"@import",-1)),s[14]||(s[14]=a(" causes numerous problems, requiring Sass members to be manually namespaced to avoid conflicts, slowing down compilation when the same file is imported more than once, and making it very difficult for both humans and tools to tell where a given variable, mixin, or function comes from.")),t(n,{style:{color:"rgb(36, 43, 52)"}},{default:e(()=>s[10]||(s[10]=[a("@import 会带来很多问题，比如需要手动为 Sass 成员命名以避免冲突，")])),_:1}),i("strong",null,[t(n,{style:{color:"rgb(36, 43, 52)"}},{default:e(()=>s[11]||(s[11]=[a("当同一文件被导入多次时会减慢编译速度")])),_:1})]),t(n,{style:{color:"rgb(36, 43, 52)"}},{default:e(()=>s[12]||(s[12]=[a("，而且人类和工具都很难分辨某个变量、mixin 或函数来自何处。")])),_:1})])]),s[20]||(s[20]=h(`<h3 id="built-in" tabindex="-1">built-in <a class="header-anchor" href="#built-in" aria-label="Permalink to &quot;built-in&quot;">​</a></h3><p><img src="https://cdn.nlark.com/yuque/0/2025/png/26456403/1744270549354-8dea1c0b-125c-4cef-bfd0-f39ee4ff0984.png" alt="" data-fancybox="gallery" loading="lazy"></p><blockquote><p>Before the Sass module system was introduced, all Sass functions were globally available at all times. Many functions still have global aliases (these are listed in their documentation). The Sass team discourages their use and will eventually deprecate them, but for now they remain available for compatibility with older Sass versions and with LibSass (which doesn’t support the module system yet).</p><p>在引入 Sass 模块系统之前，所有 Sass 函数在任何时候都是全局可用的。 许多函数仍有全局别名（在其文档中列出）。 Sass 团队不鼓励使用这些别名，并将最终淘汰它们，但目前它们仍然可用，以便与旧版本的 Sass 和 LibSass 兼容（LibSass 尚不支持模块系统）。</p></blockquote><h3 id="legacy-js-api" tabindex="-1">Legacy JS API <a class="header-anchor" href="#legacy-js-api" aria-label="Permalink to &quot;Legacy JS API&quot;">​</a></h3><blockquote><p>Vite 6 uses the modern API by default. Previous versions of Vite still use the legacy API, however from Vite 5.4 you can switch it by setting <code>api</code> to <code>&quot;modern&quot;</code> or <code>&quot;modern-compiler&quot;</code>. See <a href="https://vitejs.dev/config/shared-options.html#css-preprocessoroptions" target="_blank" rel="noreferrer">Vite’s documentation</a> for more details.</p><p>Vite 6 默认使用现代 API。 以前版本的 Vite 仍使用传统 API，但从 Vite 5.4 开始，您可以通过将 api 设置为 &quot;modern &quot;或 &quot;modern-compiler &quot;来切换。 更多详情，请参阅 Vite 文档。</p><p><a href="https://vitejs.cn/vite5-cn/config/shared-options.html#css-preprocessoroptions" target="_blank" rel="noreferrer">https://vitejs.cn/vite5-cn/config/shared-options.html#css-preprocessoroptions</a></p><p>有示例</p></blockquote><h2 id="处理" tabindex="-1">处理 <a class="header-anchor" href="#处理" aria-label="Permalink to &quot;处理&quot;">​</a></h2><h3 id="修改vite配置-支持现代api" tabindex="-1">修改vite配置，支持现代API <a class="header-anchor" href="#修改vite配置-支持现代api" aria-label="Permalink to &quot;修改vite配置，支持现代API&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 官方示例  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  css: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    preprocessorOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      less: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        math: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;parens-division&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      styl: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        define: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          $specialColor: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stylus.nodes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RGBA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">197</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scss: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        api: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;modern-compiler&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或 &quot;modern&quot;，&quot;legacy&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        importers: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="将变量文件配置为全局" tabindex="-1">将变量文件配置为全局 <a class="header-anchor" href="#将变量文件配置为全局" aria-label="Permalink to &quot;将变量文件配置为全局&quot;">​</a></h3><blockquote><p>在多个vue文件样式中都使用了变量，所以配置成全局</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			preprocessorOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				scss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">					additionalData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`@use &quot;@/styles/variables.scss&quot; as *;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在.vue文件中使用了scss  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">					api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;modern-compiler&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span></code></pre></div><h3 id="优化-import" tabindex="-1">优化@import <a class="header-anchor" href="#优化-import" aria-label="Permalink to &quot;优化@import&quot;">​</a></h3><p>将@import 优化修改为 @use @forward</p><h4 id="use" tabindex="-1">@use <a class="header-anchor" href="#use" aria-label="Permalink to &quot;@use&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// style1.scss 普通引用，使用文件名作为分组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@use </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/corners&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @use &quot;src/corners&quot; as corners;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.button {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @include corners.rounded;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 5px </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corners.$radius;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="use-forward-区别" tabindex="-1">@use @forward 区别 <a class="header-anchor" href="#use-forward-区别" aria-label="Permalink to &quot;@use  @forward   区别&quot;">​</a></h4><ol><li>对于样式而言，两者并无区别</li><li>对于变量、函数、mixin而言，@use 只能引入后，在当前文件使用，有局部作用域；但是对于@forward而言，引入后自身不能使用，但是可以用来<strong>被</strong>使用</li><li>两者结合，则自身可以使用，也可以被外部引入使用</li></ol><h3 id="优化内置函数" tabindex="-1">优化内置函数 <a class="header-anchor" href="#优化内置函数" aria-label="Permalink to &quot;优化内置函数&quot;">​</a></h3><p>根据官方文档改造</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@use </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sass:map&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用  map-get ---&gt; map.get</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">colors, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;primary&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="遇到的问题" tabindex="-1">遇到的问题 <a class="header-anchor" href="#遇到的问题" aria-label="Permalink to &quot;遇到的问题&quot;">​</a></h2><h3 id="升级后-因为全局引入了变量-module-scss-我想在js文件中访问-在变量文件中-export暴露-在-vue文件中import引入-但是报错了-造成了循环引用" tabindex="-1">升级后，因为全局引入了变量.module.scss，我想在js文件中访问,在变量文件中:export暴露，在.vue文件中import引入，但是报错了，造成了循环引用 <a class="header-anchor" href="#升级后-因为全局引入了变量-module-scss-我想在js文件中访问-在变量文件中-export暴露-在-vue文件中import引入-但是报错了-造成了循环引用" aria-label="Permalink to &quot;升级后，因为全局引入了变量.module.scss，我想在js文件中访问,在变量文件中:export暴露，在.vue文件中import引入，但是报错了，造成了循环引用&quot;">​</a></h3><p>解决：又新建了一个新的global.module.scss，用来中转</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* stylelint-disable */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 因为已在全局引入，所以不需要在这里引入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    menuText: $menuText;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	menuActiveText: $menuActiveText;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	menuActive: $menuActive;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	subMenuActiveText: $subMenuActiveText;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	menuBg: $menuBg;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	menuHover: $menuHover;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	subMenuBg: $subMenuBg;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	subMenuHover: $subMenuHover;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	sideBarWidth: $sideBarWidth;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="后续的思考" tabindex="-1">后续的思考 <a class="header-anchor" href="#后续的思考" aria-label="Permalink to &quot;后续的思考&quot;">​</a></h2><h3 id="我的scss变量想同时在另外的scss文件-脚本文件中使用-怎么做" tabindex="-1">我的scss变量想同时在另外的scss文件 &amp; 脚本文件中使用，怎么做? <a class="header-anchor" href="#我的scss变量想同时在另外的scss文件-脚本文件中使用-怎么做" aria-label="Permalink to &quot;我的scss变量想同时在另外的scss文件 &amp; 脚本文件中使用，怎么做?&quot;">​</a></h3><h4 id="公用json法" tabindex="-1">公用json法 <a class="header-anchor" href="#公用json法" aria-label="Permalink to &quot;公用json法&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install sass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span></code></pre></div><ol><li>新建json文件管理变量<img src="https://cdn.nlark.com/yuque/0/2025/png/26456403/1743592601352-ccb3b1e2-d516-45de-ab9f-94351f25c565.png" alt="" data-fancybox="gallery" loading="lazy"></li><li><img src="https://cdn.nlark.com/yuque/0/2025/png/26456403/1743592642918-862aa5aa-ff01-43cb-8efc-e5fd5ee12ce3.png" alt="" data-fancybox="gallery" loading="lazy"></li></ol><h4 id="文件中转法" tabindex="-1">文件中转法 <a class="header-anchor" href="#文件中转法" aria-label="Permalink to &quot;文件中转法&quot;">​</a></h4><p>本次用的这个，就是通过新建一个文件，将变量中转，提供给js使用</p>`,31))])}const v=l(k,[["render",d]]);export{b as __pageData,v as default};
