import{_ as l,c as n,a4 as e,j as t,G as r,w as s,B as i,o as d,a as c}from"./chunks/framework.vOILIgLK.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DeepUnderstanding/P1 HTML+CSS理解/1.css属性值的计算过程.md","filePath":"DeepUnderstanding/P1 HTML+CSS理解/1.css属性值的计算过程.md"}'),p={name:"DeepUnderstanding/P1 HTML+CSS理解/1.css属性值的计算过程.md"};function u(h,a,b,m,q,f){const o=i("font");return d(),n("div",null,[a[2]||(a[2]=e('<blockquote><p>我们写的每个元素最终样式的计算过程</p></blockquote><h2 id="计算过程" tabindex="-1">计算过程 <a class="header-anchor" href="#计算过程" aria-label="Permalink to &quot;计算过程&quot;">​</a></h2><h3 id="确认声明值" tabindex="-1">确认声明值 <a class="header-anchor" href="#确认声明值" aria-label="Permalink to &quot;确认声明值&quot;">​</a></h3><p>参考样式表中没有冲突的声明，直接将值赋给computed style</p><blockquote><p>参考样式表：作者样式表 + 浏览器默认样式</p></blockquote><h3 id="层叠冲突" tabindex="-1">层叠冲突 <a class="header-anchor" href="#层叠冲突" aria-label="Permalink to &quot;层叠冲突&quot;">​</a></h3><p>参考样式表中有冲突的声明使用层叠规则，确定css属性值</p><ul><li>权重比较</li><li>权重相同，后边的覆盖前边的</li></ul><blockquote><p>浏览器默认样式权重 &lt; *</p></blockquote><h3 id="使用继承" tabindex="-1">使用继承 <a class="header-anchor" href="#使用继承" aria-label="Permalink to &quot;使用继承&quot;">​</a></h3><p>对仍然没有值的属性，能继承的就继承</p>',11)),t("blockquote",null,[r(o,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:s(()=>a[0]||(a[0]=[c("继承的样式")])),_:1}),a[1]||(a[1]=t("strong",null,"仍低于子元素的任何直接样式 < 浏览器默认样式",-1))]),a[3]||(a[3]=e('<h3 id="使用属性默认值" tabindex="-1">使用属性默认值 <a class="header-anchor" href="#使用属性默认值" aria-label="Permalink to &quot;使用属性默认值&quot;">​</a></h3><blockquote><p>属性默认值 != 浏览器默认样式</p></blockquote><p>继承完成后还没有值的，只能使用该属性的默认值</p><h2 id="最终结果" tabindex="-1">最终结果 <a class="header-anchor" href="#最终结果" aria-label="Permalink to &quot;最终结果&quot;">​</a></h2><p>所有的样式属性都应该有值</p><p><img src="https://ankang-blog-img.oss-cn-beijing.aliyuncs.com/myBlogImg/20250512/vX1b9b.png" alt="" data-fancybox="gallery" loading="lazy"></p>',6))])}const _=l(p,[["render",u]]);export{g as __pageData,_ as default};
