import{_ as s,c as i,a4 as n,o as e}from"./chunks/framework.vOILIgLK.js";const k=JSON.parse('{"title":"杂记","description":"","frontmatter":{},"headers":[],"relativePath":"TutorialRecord/项目/项目规范流搭建/终点&包的建立心路历程.md","filePath":"TutorialRecord/项目/项目规范流搭建/终点&包的建立心路历程.md"}'),t={name:"TutorialRecord/项目/项目规范流搭建/终点&包的建立心路历程.md"};function l(p,a,h,r,o,d){return e(),i("div",null,a[0]||(a[0]=[n(`<h1 id="杂记" tabindex="-1">杂记 <a class="header-anchor" href="#杂记" aria-label="Permalink to &quot;杂记&quot;">​</a></h1><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><p>我们在自己开发的时候，为了实现代码规范，我们在每个项目中都需要一些繁琐的配置，包括校验工具、husky commitlint lint-staged vscode 等配置</p><p>所以我希望通过创建一个 npm 包，每次只需要安装包然后初始化，就可以完成这一系列配置</p><h2 id="心路历程" tabindex="-1">心路历程 <a class="header-anchor" href="#心路历程" aria-label="Permalink to &quot;心路历程&quot;">​</a></h2><h3 id="问题出发" tabindex="-1">问题出发 <a class="header-anchor" href="#问题出发" aria-label="Permalink to &quot;问题出发&quot;">​</a></h3><p>首先我们的项目都是 VUE3 SCSS 技术栈，我在部分项目中完成了整个流程的搭建，现在还剩十几个项目，总不能每个都这么来一下吧，所以我决定创建一个包，每次安装完成后，执行初始化命令即可完成这部分重复工作</p><h3 id="确定问题后-开始思考" tabindex="-1">确定问题后，开始思考 <a class="header-anchor" href="#确定问题后-开始思考" aria-label="Permalink to &quot;确定问题后，开始思考&quot;">​</a></h3><h4 id="最初构想" tabindex="-1">最初构想 <a class="header-anchor" href="#最初构想" aria-label="Permalink to &quot;最初构想&quot;">​</a></h4><p>思考我想我要完成的包的功能</p><p><img src="https://ankang-blog-img.oss-cn-beijing.aliyuncs.com/myBlogImg/20250822/kQ6oJF.png" alt="画板" data-fancybox="gallery" loading="lazy"></p><p>安装完成后，通过一个命令，让我的项目装上依赖，以及能够在项目中生成对应的配置文件</p><p>运行命令时，能够让开发者在终端自定义选择框架、预编译语言，根据用户的选择安装不同的依赖、生成不同的配置文件</p><p>若项目中已经存在对应的配置文件（要知道每个功能对应的配置文件有哪些），能够将项目配置和包配置进行合并</p><p>若项目中没有对应的配置文件，则根据包 configs 生成配置文件</p><h4 id="基本流程" tabindex="-1">基本流程 <a class="header-anchor" href="#基本流程" aria-label="Permalink to &quot;基本流程&quot;">​</a></h4><p><img src="https://ankang-blog-img.oss-cn-beijing.aliyuncs.com/myBlogImg/20250822/5VuUn3.png" alt="画板" data-fancybox="gallery" loading="lazy"></p><h4 id="调研" tabindex="-1">调研 <a class="header-anchor" href="#调研" aria-label="Permalink to &quot;调研&quot;">​</a></h4><p>包 bin 命令的暴露</p><p>交互式选择的实现</p><p>配置文件生成（直接将设好的配置 copy 到项目根目录）</p><p>配置文件合并</p><p>文件读取</p><p>文件写入</p><p>文件 copy</p><p>js ast</p><p>json</p><h4 id="开始-code" tabindex="-1">开始 code <a class="header-anchor" href="#开始-code" aria-label="Permalink to &quot;开始 code&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bin;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configs;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scripts;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">package.json;</span></span></code></pre></div><h4 id="后来的思考" tabindex="-1">后来的思考 <a class="header-anchor" href="#后来的思考" aria-label="Permalink to &quot;后来的思考&quot;">​</a></h4><p>实现初版本后，我发现了一个问题，特别是对于 eslint stylelint ,我感觉根据框架的合并写入实际并不符合我最初的做包的想法，并且对框架而言，核心主要是解析 vue / jsx 这类代码，最终还是要回到 js 上，而且合并等逻辑相对而言复杂，对于一个简单的包来说减了芝麻，丢了西瓜，所以我后来想，我只需要提供一个基础的校验规则，配置文件（eslint stylelint）在项目中创建，去继承这个规则，至于什么框架，什么别的东西，完全由自己写的配置文件解析</p><h4 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h4><p>我想得到的：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.husky</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.vscode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">baseConfig</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.eslintrc.cjs   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.eslint.base.js)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.stylelint.cjs  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.stylelint.base.js)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.lintstaged</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commmitlint.config.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">配置文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">忽略的一些配置</span></span></code></pre></div><h2 id="完事" tabindex="-1">完事 <a class="header-anchor" href="#完事" aria-label="Permalink to &quot;完事&quot;">​</a></h2><p>得到一个适合我们公司项目用的包</p>`,36)]))}const E=s(t,[["render",l]]);export{k as __pageData,E as default};
