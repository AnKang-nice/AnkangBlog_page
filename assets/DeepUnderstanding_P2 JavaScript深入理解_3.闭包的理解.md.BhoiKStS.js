import{_ as a,c as i,a4 as n,o as l}from"./chunks/framework.vOILIgLK.js";const d=JSON.parse('{"title":"闭包的理解","description":"","frontmatter":{},"headers":[],"relativePath":"DeepUnderstanding/P2 JavaScript深入理解/3.闭包的理解.md","filePath":"DeepUnderstanding/P2 JavaScript深入理解/3.闭包的理解.md"}'),t={name:"DeepUnderstanding/P2 JavaScript深入理解/3.闭包的理解.md"};function h(e,s,p,k,r,o){return l(),i("div",null,s[0]||(s[0]=[n(`<h1 id="闭包的理解" tabindex="-1">闭包的理解 <a class="header-anchor" href="#闭包的理解" aria-label="Permalink to &quot;闭包的理解&quot;">​</a></h1><h2 id="闭包的定义" tabindex="-1">闭包的定义 <a class="header-anchor" href="#闭包的定义" aria-label="Permalink to &quot;闭包的定义&quot;">​</a></h2><h3 id="维基百科" tabindex="-1">维基百科 <a class="header-anchor" href="#维基百科" aria-label="Permalink to &quot;维基百科&quot;">​</a></h3><ul><li>闭包 Closure，又称词法闭包或函数闭包</li><li>是在支持头等函数的编程语言中，实现<strong>词法绑定</strong>的一种技术</li><li>闭包在实现上是一个结构体，它存储了<strong>一个函数和一个关联的环境</strong></li><li>闭包跟函数最大的区别在于 当捕捉闭包的时候，它的<strong>自由变量</strong>会在捕捉时被确定，这样的话，及时脱离捕捉时的上下文，它也能正常运行</li></ul><h3 id="mdn" tabindex="-1">MDN <a class="header-anchor" href="#mdn" aria-label="Permalink to &quot;MDN&quot;">​</a></h3><ul><li><strong>闭包</strong>是由捆绑起来（封闭的）的函数和函数周围状态（<strong>词法环境</strong>）的引用组合而成。</li><li>换言之，闭包让函数能访问它的外部作用域。</li><li>在 JavaScript 中，闭包会随着函数的创建而同时创建。</li></ul><h3 id="个人理解" tabindex="-1">个人理解 <a class="header-anchor" href="#个人理解" aria-label="Permalink to &quot;个人理解&quot;">​</a></h3><ul><li>对于一个普通函数，若他能访问外层作用域的自由变量，则这个函数结构就可以称为闭包</li><li>广义来看，JS 的函数都是闭包，因为在全局中的函数也在访问全局作用域的自由变量</li><li>狭义来看，一个访问了外部作用域自由变量的函数（组成的结构）就是一个闭包</li><li><strong>闭包是一种结构</strong></li></ul><blockquote><p>作用域/自由变量域是在编译时，就确定的</p><p>我的问题</p><ol><li>所谓编译时，指的是 parse 在进行词法分析的时候吗？</li></ol></blockquote><h2 id="闭包的最简示例分析" tabindex="-1">闭包的最简示例分析 <a class="header-anchor" href="#闭包的最简示例分析" aria-label="Permalink to &quot;闭包的最简示例分析&quot;">​</a></h2><h3 id="es1-3" tabindex="-1">ES1-3 <a class="header-anchor" href="#es1-3" aria-label="Permalink to &quot;ES1-3&quot;">​</a></h3><p><img src="https://ankang-blog-img.oss-cn-beijing.aliyuncs.com/myBlogImg/20250103/ShiQVq.png" alt="ShiQVq" data-fancybox="gallery" loading="lazy"></p><ul><li></li></ul><h3 id="es-新-结合执行上下文、环境记录分析-纯属个人理解" tabindex="-1">ES 新-结合执行上下文、环境记录分析（纯属个人理解） <a class="header-anchor" href="#es-新-结合执行上下文、环境记录分析-纯属个人理解" aria-label="Permalink to &quot;ES 新-结合执行上下文、环境记录分析（纯属个人理解）&quot;">​</a></h3><p>代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 18</span></span></code></pre></div><p>分析：</p><ul><li>在 v8 开始后，引擎会初始化代码执行所需要的环境，比如 ECS、内存、全局对象...</li></ul><blockquote><p>复习：全局对象的创建是在进入任何执行上下文之前</p></blockquote><ul><li>创建全局执行上下文&amp;全局环境记录，全局执行上下文中有执行上下文所对应的那些组件，词法环境、变量环境与全局环境记录相关联</li><li>解析遇到 foo 函数定义，会创建 foo 函数的函数对象，执行到<code>var fn = foo()</code> ，在执行前夕，会创建函数环境记录 &amp; 函数执行上下文</li></ul><p><img src="https://ankang-blog-img.oss-cn-beijing.aliyuncs.com/myBlogImg/20250103/HIkBjt.png" alt="HIkBjt" data-fancybox="gallery" loading="lazy"></p><ul><li>开始执行 foo, var age = 18,在 foo 的执行上下文中找到 age 变量，将值改为 18，然后执行到 return，遇到了 bar 函数声明，就会在内存中创建 bar 函数对象 &amp; 创建 bar 函数环境记录，将 bar 函数 return</li></ul><p><img src="https://ankang-blog-img.oss-cn-beijing.aliyuncs.com/myBlogImg/20250103/6hBoMz.png" alt="6hBoMz" data-fancybox="gallery" loading="lazy"></p><ul><li>return 后 foo 函数执行完成，return bar 函数，foo 执行上下文销毁，此时正常来讲 foo 函数环境记录也应该销毁，但是由于 bar 函数环境记录中的 outerEnv 指向 foo 函数环境记录，所以 foo 函数环境记录未被销毁</li><li>然后 给 fn 赋值，在全局执行上下文中找到 fn, 赋值为 bar</li><li>fn 执行，创建 bar 函数执行上下文，执行到打印 age，先在自己执行上下文对应的环境记录中寻找，找不到通过 outerEnv 找到 foo 函数环境记录，找到变量 age <img src="https://ankang-blog-img.oss-cn-beijing.aliyuncs.com/myBlogImg/20250103/FYYP9H.png" alt="FYYP9H" data-fancybox="gallery" loading="lazy"></li></ul><h2 id="闭包的应用场景" tabindex="-1">闭包的应用场景 <a class="header-anchor" href="#闭包的应用场景" aria-label="Permalink to &quot;闭包的应用场景&quot;">​</a></h2><p>函数封装</p><p>柯里化</p><p>数据私有</p><h2 id="内存泄漏-防止" tabindex="-1">内存泄漏 &amp; 防止 <a class="header-anchor" href="#内存泄漏-防止" aria-label="Permalink to &quot;内存泄漏 &amp; 防止&quot;">​</a></h2><p>内存泄漏防止：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 18</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 防止内存泄漏</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div>`,31)]))}const c=a(t,[["render",h]]);export{d as __pageData,c as default};
