import{_ as r,c as p,j as a,a as i,G as l,w as t,a4 as e,B as o,o as k}from"./chunks/framework.vOILIgLK.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DeepUnderstanding/P1 深入理解系列/2.JavaScript环境记录（参考ECMA2024）.md","filePath":"DeepUnderstanding/P1 深入理解系列/2.JavaScript环境记录（参考ECMA2024）.md"}'),d={name:"DeepUnderstanding/P1 深入理解系列/2.JavaScript环境记录（参考ECMA2024）.md"},E={id:"环境记录的-outerenv",tabindex:"-1"},h={href:"https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-environment-records",target:"_blank",rel:"noreferrer"},g={href:"https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-environment-records",target:"_blank",rel:"noreferrer"},y={href:"https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-declarative-environment-records",target:"_blank",rel:"noreferrer"},u={href:"https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-object-environment-records",target:"_blank",rel:"noreferrer"},b={href:"https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-global-environment-records",target:"_blank",rel:"noreferrer"},M={href:"https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-function-environment-records",target:"_blank",rel:"noreferrer"},F={href:"https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-module-environment-records",target:"_blank",rel:"noreferrer"},C={href:"https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-declarative-environment-records",target:"_blank",rel:"noreferrer"},f={id:"存储内容-1",tabindex:"-1"},j={id:"模块环境记录-module-environment-records",tabindex:"-1"};function v(m,s,z,x,A,w){const n=o("font");return k(),p("div",null,[s[353]||(s[353]=a("div",{class:"info custom-block"},[a("p",{class:"custom-block-title"},"INFO"),a("p",null,"tips:"),a("p",null,"记录个人理解，大佬们不喜勿喷，感谢")],-1)),s[354]||(s[354]=a("h2",{id:"什么是环境记录",tabindex:"-1"},[i("什么是环境记录 "),a("a",{class:"header-anchor",href:"#什么是环境记录","aria-label":'Permalink to "什么是环境记录"'},"​")],-1)),a("blockquote",null,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[0]||(s[0]=[i("Environment Record is a specification type used to define the association of ")])),_:1}),s[4]||(s[4]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[1]||(s[1]=[i("Identifier")])),_:1}),s[5]||(s[5]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-Identifier)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[2]||(s[2]=[i("s to specific variables and functions, based upon the lexical nesting structure of ECMAScript code.")])),_:1}),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[3]||(s[3]=[i("环境记录（Environment Record）是一种规范类型，用于根据 ECMAScript 代码的词法嵌套结构，定义标识符与特定变量和函数的关联。")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[6]||(s[6]=[i("核心：定义了")])),_:1}),s[355]||(s[355]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[7]||(s[7]=[i("标识符")])),_:1}),s[356]||(s[356]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[8]||(s[8]=[i("（var、let、const、function...定义的变量名）与")])),_:1}),s[357]||(s[357]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[9]||(s[9]=[i("特定变量 & 函数")])),_:1}),s[358]||(s[358]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[10]||(s[10]=[i(" 的")])),_:1}),s[359]||(s[359]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[11]||(s[11]=[i("关联")])),_:1}),s[360]||(s[360]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[12]||(s[12]=[i("（映射关系）")])),_:1}),s[361]||(s[361]=a("blockquote",null,[a("p",null,"标识符："),a("p",null,"在JS中所有的可以由我们自主命名的都可以称为是标识符"),a("p",null,"例如：变量名、函数名、属性名都属于标识符")],-1)),s[362]||(s[362]=a("h2",{id:"环境记录的创建",tabindex:"-1"},[i("环境记录的创建 "),a("a",{class:"header-anchor",href:"#环境记录的创建","aria-label":'Permalink to "环境记录的创建"'},"​")],-1)),a("blockquote",null,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[13]||(s[13]=[i("Usually an Environment Record is associated with some specific syntactic structure of ECMAScript code such as a ")])),_:1}),s[23]||(s[23]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[14]||(s[14]=[i("FunctionDeclaration")])),_:1}),s[24]||(s[24]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-FunctionDeclaration)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[15]||(s[15]=[i(", a ")])),_:1}),s[25]||(s[25]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[16]||(s[16]=[i("BlockStatement")])),_:1}),s[26]||(s[26]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-BlockStatement)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[17]||(s[17]=[i(", or a ")])),_:1}),s[27]||(s[27]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[18]||(s[18]=[i("Catch")])),_:1}),s[28]||(s[28]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-Catch)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[19]||(s[19]=[i(" clause of a ")])),_:1}),s[29]||(s[29]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[20]||(s[20]=[i("TryStatement")])),_:1}),s[30]||(s[30]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-TryStatement)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[21]||(s[21]=[i(". Each time such code is evaluated, a new Environment Record is created to record the identifier bindings that are created by that code.")])),_:1}),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[22]||(s[22]=[i("通常，环境记录与 ECMAScript 代码的某些特定语法结构相关联，例如函数声明FunctionDeclaration、BlockStatement 或 TryStatement 的 Catch 子句。 每次评估此类代码时，都会创建一个新的环境记录，以记录该代码创建的标识符绑定。")])),_:1})]),a("p",null,[a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[31]||(s[31]=[i("核心")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[32]||(s[32]=[i("：当遇到以下代码时，就会创建一个新的环境记录。")])),_:1})]),a("ul",null,[a("li",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[33]||(s[33]=[i("函数声明 Script ")])),_:1})]),a("li",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[34]||(s[34]=[i("{}块语句")])),_:1})]),a("li",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[35]||(s[35]=[i("try catch的catch块 ")])),_:1})])]),a("h3",E,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[36]||(s[36]=[i("环境记录的[[outerEnv]]")])),_:1}),s[37]||(s[37]=i()),s[38]||(s[38]=a("a",{class:"header-anchor",href:"#环境记录的-outerenv","aria-label":'Permalink to "<font style="color:rgb(36, 43, 52);">环境记录的[[outerEnv]]</font>"'},"​",-1))]),a("blockquote",null,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[39]||(s[39]=[i("Every Environment Record has an [[OuterEnv]] field, which is either ")])),_:1}),s[44]||(s[44]=i("**")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[40]||(s[40]=[i("null")])),_:1}),s[45]||(s[45]=i("**")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[41]||(s[41]=[i(" or a reference to an outer Environment Record. This is used to model the logical nesting of Environment Record values. ")])),_:1}),a("p",null,[a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[42]||(s[42]=[i("每个环境记录都有一个[[OuterEnv]]字段")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[43]||(s[43]=[i("，该字段要么为空，要么是对外部环境记录的引用。 它用于模拟环境记录值的逻辑嵌套。")])),_:1})])]),a("p",null,[a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[46]||(s[46]=[i("每个环境记录都有一个[[OuterEnv]]字段")])),_:1})])]),a("p",null,[a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[47]||(s[47]=[i("全局环境记录OuterEnv为null ")])),_:1})])]),a("p",null,[a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[48]||(s[48]=[i("当前环境记录可以访问到最近的外部环境记录")])),_:1})])]),s[363]||(s[363]=a("h2",{id:"环境记录的分类",tabindex:"-1"},[i("环境记录的分类 "),a("a",{class:"header-anchor",href:"#环境记录的分类","aria-label":'Permalink to "环境记录的分类"'},"​")],-1)),a("blockquote",null,[a("p",null,[a("a",h,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[49]||(s[49]=[i("Environment Records")])),_:1})]),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[50]||(s[50]=[i(" can be thought of as existing in a simple object-oriented hierarchy where ")])),_:1}),a("a",g,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[51]||(s[51]=[i("Environment Record")])),_:1})]),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[52]||(s[52]=[i(" is an abstract class with three concrete subclasses: ")])),_:1}),a("a",y,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[53]||(s[53]=[i("Declarative Environment Record")])),_:1})]),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[54]||(s[54]=[i(", ")])),_:1}),a("a",u,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[55]||(s[55]=[i("Object Environment Record")])),_:1})]),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[56]||(s[56]=[i(", and ")])),_:1}),a("a",b,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[57]||(s[57]=[i("Global Environment Record")])),_:1})]),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[58]||(s[58]=[i(". ")])),_:1}),a("a",M,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[59]||(s[59]=[i("Function Environment Records")])),_:1})]),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[60]||(s[60]=[i(" and ")])),_:1}),a("a",F,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[61]||(s[61]=[i("Module Environment Records")])),_:1})]),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[62]||(s[62]=[i(" are subclasses of ")])),_:1}),a("a",C,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[63]||(s[63]=[i("Declarative Environment Record")])),_:1})]),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[64]||(s[64]=[i(".")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[65]||(s[65]=[i("环境记录可以被视为存在于一个简单的面向对象层次结构中，其中环境记录是一个抽象类，有三个具体的子类： 声明环境记录、对象环境记录和全局环境记录。 函数环境记录和模块环境记录是声明式环境记录的子类。")])),_:1})]),s[364]||(s[364]=a("p",null,[a("img",{src:"https://cdn.nlark.com/yuque/0/2024/png/26456403/1733280518905-5a328e85-a95d-4d30-867e-27c848d90c8a.png",alt:"","data-fancybox":"gallery",loading:"lazy"})],-1)),s[365]||(s[365]=a("h3",{id:"声明式环境记录",tabindex:"-1"},[i("声明式环境记录 "),a("a",{class:"header-anchor",href:"#声明式环境记录","aria-label":'Permalink to "声明式环境记录"'},"​")],-1)),a("blockquote",null,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[66]||(s[66]=[i("A ")])),_:1}),s[83]||(s[83]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[67]||(s[67]=[i("Declarative Environment Record")])),_:1}),s[84]||(s[84]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-declarative-environment-records)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[68]||(s[68]=[i(" is used to define the effect of ECMAScript language syntactic elements such as ")])),_:1}),s[85]||(s[85]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[69]||(s[69]=[i("FunctionDeclaration")])),_:1}),s[86]||(s[86]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-FunctionDeclaration)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[70]||(s[70]=[i("s, ")])),_:1}),s[87]||(s[87]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[71]||(s[71]=[i("VariableDeclaration")])),_:1}),s[88]||(s[88]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-VariableDeclaration)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[72]||(s[72]=[i("s, and ")])),_:1}),s[89]||(s[89]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[73]||(s[73]=[i("Catch")])),_:1}),s[90]||(s[90]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-Catch)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[74]||(s[74]=[i(" clauses that directly associate identifier bindings with ")])),_:1}),s[91]||(s[91]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[75]||(s[75]=[i("ECMAScript language values")])),_:1}),s[92]||(s[92]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-ecmascript-language-types)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[76]||(s[76]=[i(".")])),_:1}),s[93]||(s[93]=e("<p>在 ECMAScript 规范中，<strong>声明式环境记录（Declarative Environment Record）</strong> 用于描述某些语法结构（如 <code>FunctionDeclaration</code>、<code>VariableDeclaration</code> 和 <code>catch</code> 子句）的执行效果。它的主要功能是<strong>直接将标识符绑定到 ECMAScript 语言中的值上</strong>。<strong>换句话说</strong>，声明式环境记录是为<strong>标识符</strong>（如变量名或函数名）提供<strong>存储位置</strong>的一个抽象结构，并负责<strong>管理</strong>它们的<strong>生命周期和作用域。</strong></p>",1)),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[77]||(s[77]=[i("Each Declarative Environment Record is associated with an ECMAScript program scope containing variable, constant, let, class, module, import, and/or function declarations. A Declarative Environment Record binds the set of identifiers defined by the declarations contained within its scope.")])),_:1}),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[78]||(s[78]=[i("每个声明式环境记录都与包含")])),_:1}),s[94]||(s[94]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[79]||(s[79]=[i("var、const、let、类、模块、导入和/或函数")])),_:1}),s[95]||(s[95]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[80]||(s[80]=[i("声明的 ECMAScript 程序作用域相关联。 声明式环境记录绑定了其作用域中包含的")])),_:1}),s[96]||(s[96]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[81]||(s[81]=[i("声明所定义的标识符集")])),_:1}),s[97]||(s[97]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[82]||(s[82]=[i("。")])),_:1})]),s[366]||(s[366]=e(`<h4 id="存储内容" tabindex="-1">存储内容 <a class="header-anchor" href="#存储内容" aria-label="Permalink to &quot;存储内容&quot;">​</a></h4><p>包含变量、常量、<code>let</code>、<code>const</code>、函数、类的声明。</p><h4 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><ul><li>用于管理<strong>函数</strong>或<strong>块</strong>级作用域内的标识符。</li></ul><h4 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h4><ul><li>标识符和值<strong>直接绑定</strong>在环境记录中，而不是依赖于 JavaScript 对象。</li><li>支持块级作用域（<code>let</code> 和 <code>const</code>）。</li><li>为函数作用域、块作用域等提供支持。</li></ul><h4 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;a&#39; 是 foo 的声明式环境记录中的绑定</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;b&#39; 同样存储在声明式环境记录中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;c&#39; 存储在块级作用域的声明式环境记录中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;c&#39; 已经超出了其环境记录的作用域</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><hr><h3 id="对象式环境记录-object-environment-record" tabindex="-1">对象式环境记录（Object Environment Record） <a class="header-anchor" href="#对象式环境记录-object-environment-record" aria-label="Permalink to &quot;对象式环境记录（Object Environment Record）&quot;">​</a></h3>`,10)),a("blockquote",null,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[98]||(s[98]=[i("An ")])),_:1}),s[116]||(s[116]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[99]||(s[99]=[i("Object Environment Record")])),_:1}),s[117]||(s[117]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-object-environment-records)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[100]||(s[100]=[i(" is used to define the effect of ECMAScript elements such as ")])),_:1}),s[118]||(s[118]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[101]||(s[101]=[i("WithStatement")])),_:1}),s[119]||(s[119]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-WithStatement)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[102]||(s[102]=[i(" that associate identifier bindings with the properties of some object.")])),_:1}),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[103]||(s[103]=[i("对象环境记录用于定义 ECMAScript 元素（如 WithStatement）的效果，这些元素将")])),_:1}),s[120]||(s[120]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[104]||(s[104]=[i("标识符绑定")])),_:1}),s[121]||(s[121]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[105]||(s[105]=[i("与某些对象的")])),_:1}),s[122]||(s[122]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[106]||(s[106]=[i("属性")])),_:1}),s[123]||(s[123]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[107]||(s[107]=[i("相关联。")])),_:1}),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[108]||(s[108]=[i("Each Object Environment Record is associated with an object called its ")])),_:1}),s[124]||(s[124]=i("_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[109]||(s[109]=[i("binding object")])),_:1}),s[125]||(s[125]=i("_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[110]||(s[110]=[i(". An Object Environment Record binds the set of string identifier names that directly correspond to the property names of its binding object. ")])),_:1}),s[126]||(s[126]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[111]||(s[111]=[i("Property keys")])),_:1}),s[127]||(s[127]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-object-type)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[112]||(s[112]=[i(" that are not strings in the form of an ")])),_:1}),s[128]||(s[128]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[113]||(s[113]=[i("IdentifierName")])),_:1}),s[129]||(s[129]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-IdentifierName)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[114]||(s[114]=[i(" are not included in the set of bound identifiers. ")])),_:1}),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[115]||(s[115]=[i("每个对象环境记录都与其绑定对象相关联。 对象环境记录绑定与其绑定对象的属性名称直接对应的字符串标识符名称集。 非字符串形式标识符名称的属性键不包含在绑定标识符集合中。")])),_:1})]),a("h4",f,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[130]||(s[130]=[i("存储内容")])),_:1}),s[131]||(s[131]=i()),s[132]||(s[132]=a("a",{class:"header-anchor",href:"#存储内容-1","aria-label":'Permalink to "<font style="color:rgb(36, 43, 52);">存储内容</font>"'},"​",-1))]),s[367]||(s[367]=e(`<p>基于JS对象的绑定</p><h4 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-label="Permalink to &quot;特点&quot;">​</a></h4><p>使用对象来存储绑定信息。 with</p><h4 id="代码示例-1" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例-1" aria-label="Permalink to &quot;代码示例&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (obj) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>在上面的代码中，<code>with (obj)</code> 会创建一个对象环境记录，<code>a</code> 和 <code>b</code> （标识符）被绑定到 <code>obj</code> 的属性 <code>a</code> 和 <code>b</code>（对象的属性）。</li><li>在 <code>with</code> 语句块内，访问 <code>a</code> 和 <code>b</code> 会首先查找该对象的属性，因此它们的值被正确地访问。</li></ul><h3 id="全局环境记录-global-environment-record" tabindex="-1">全局环境记录（Global Environment Record） <a class="header-anchor" href="#全局环境记录-global-environment-record" aria-label="Permalink to &quot;全局环境记录（Global Environment Record）&quot;">​</a></h3>`,7)),a("blockquote",null,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[133]||(s[133]=[i("A ")])),_:1}),s[161]||(s[161]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[134]||(s[134]=[i("Global Environment Record")])),_:1}),s[162]||(s[162]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-global-environment-records)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[135]||(s[135]=[i(" is used for ")])),_:1}),s[163]||(s[163]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[136]||(s[136]=[i("Script")])),_:1}),s[164]||(s[164]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-Script)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[137]||(s[137]=[i(" global declarations. It does not have an outer environment; its ")])),_:1}),s[165]||(s[165]=i("[[OuterEnv]]")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[138]||(s[138]=[i(" is ")])),_:1}),s[166]||(s[166]=i("**")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[139]||(s[139]=[i("null")])),_:1}),s[167]||(s[167]=i("**")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[140]||(s[140]=[i(". It may be prepopulated with identifier bindings and it includes an associated ")])),_:1}),s[168]||(s[168]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[141]||(s[141]=[i("global object")])),_:1}),s[169]||(s[169]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-global-object)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[142]||(s[142]=[i(" whose properties provide some of the global environment's identifier bindings. As ECMAScript code is executed, additional properties may be added to the ")])),_:1}),s[170]||(s[170]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[143]||(s[143]=[i("global object")])),_:1}),s[171]||(s[171]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-global-object)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[144]||(s[144]=[i(" and the initial properties may be modified.")])),_:1}),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[145]||(s[145]=[i("全局环境记录用于脚本全局声明。 它没有外部环境；其[[OuterEnv]]为空。 它可以预先填充标识符绑定，并包含一个关联的全局对象，其属性提供了全局环境的部分标识符绑定。 在执行 ECMAScript 代码时，可以向全局对象添加其他属性，也可以修改初始属性。")])),_:1}),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[146]||(s[146]=[i("A Global Environment Record is used to represent the outer most scope that is shared by all of the ECMAScript ")])),_:1}),s[172]||(s[172]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[147]||(s[147]=[i("Script")])),_:1}),s[173]||(s[173]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-Script)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[148]||(s[148]=[i(" elements that are processed in a common ")])),_:1}),s[174]||(s[174]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[149]||(s[149]=[i("realm")])),_:1}),s[175]||(s[175]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#realm)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[150]||(s[150]=[i(". A Global Environment Record provides the bindings for built-in globals (clause ")])),_:1}),s[176]||(s[176]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[151]||(s[151]=[i("19")])),_:1}),s[177]||(s[177]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-global-object)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[152]||(s[152]=[i("), properties of the ")])),_:1}),s[178]||(s[178]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[153]||(s[153]=[i("global object")])),_:1}),s[179]||(s[179]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-global-object)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[154]||(s[154]=[i(", and for all top-level declarations (")])),_:1}),s[180]||(s[180]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[155]||(s[155]=[i("8.2.9")])),_:1}),s[181]||(s[181]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-static-semantics-toplevellexicallyscopeddeclarations)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[156]||(s[156]=[i(", ")])),_:1}),s[182]||(s[182]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[157]||(s[157]=[i("8.2.11")])),_:1}),s[183]||(s[183]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-static-semantics-toplevelvarscopeddeclarations)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[158]||(s[158]=[i(") that occur within a ")])),_:1}),s[184]||(s[184]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[159]||(s[159]=[i("Script")])),_:1}),s[185]||(s[185]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-Script)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[160]||(s[160]=[i(".")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[186]||(s[186]=[i("全局环境记录（Global Environment Record）用于表示在共同领域中处理的所有 ECMAScript 脚本元素共享的最外部范围。 全局环境记录（Global Environment Record）为内置的")])),_:1}),s[368]||(s[368]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[187]||(s[187]=[i("全局对象")])),_:1}),s[369]||(s[369]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[188]||(s[188]=[i("（globals/window）、")])),_:1}),s[370]||(s[370]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[189]||(s[189]=[i("全局对象的属性")])),_:1}),s[371]||(s[371]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[190]||(s[190]=[i("（properties of the global object）以及脚本中出现的所有")])),_:1}),s[372]||(s[372]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[191]||(s[191]=[i("顶层声明")])),_:1}),s[373]||(s[373]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[192]||(s[192]=[i("（8.2.9、8.2.11）提供了绑定。")])),_:1}),a("blockquote",null,[l(n,{style:{color:"rgb(36, 43, 52)"}}),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[193]||(s[193]=[i('全局环境记录在逻辑上是一个单独的记录，但它是一个包含对象环境记录和声明环境记录的复合 记录。 对象环境记录的基本对象是关联的 "境界记录 "的全局对象。 该全局对象是全局环境记录的 GetThisBinding 具体方法返回的值。 全局环境记录（Global Environment Record）的')])),_:1}),s[204]||(s[204]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[194]||(s[194]=[i("对象环境记录")])),_:1}),s[205]||(s[205]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[195]||(s[195]=[i("（Object Environment Record）组件包含所有")])),_:1}),s[206]||(s[206]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[196]||(s[196]=[i("内置全局对象")])),_:1}),s[207]||(s[207]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[197]||(s[197]=[i("的绑定，以及全局代码中包含的")])),_:1}),s[208]||(s[208]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[198]||(s[198]=[i("函数声明")])),_:1}),s[209]||(s[209]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[199]||(s[199]=[i("（FunctionDeclaration）、生成器声明（GeneratorDeclaration）、异步函数声明（AsyncFunctionDeclaration）、异步生成器声明（AsyncGeneratorDeclaration）或")])),_:1}),s[210]||(s[210]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[200]||(s[200]=[i("变量声明")])),_:1}),s[211]||(s[211]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[201]||(s[201]=[i("（VariableStatement）所引入的所有绑定。 ")])),_:1}),s[212]||(s[212]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[202]||(s[202]=[i("全局代码中所有其他 ECMAScript 声明的绑定")])),_:1}),s[213]||(s[213]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[203]||(s[203]=[i("都包含在全局环境记录（Global Environment Record）的声明环境记录（Declarative Environment Record）组件中。")])),_:1})]),s[374]||(s[374]=e(`<h4 id="存储内容-2" tabindex="-1">存储内容 <a class="header-anchor" href="#存储内容-2" aria-label="Permalink to &quot;存储内容&quot;">​</a></h4><p>将全局变量和全局对象结合。将对象环境记录&amp;声明式环境记录结合</p><h4 id="特点-2" tabindex="-1">特点 <a class="header-anchor" href="#特点-2" aria-label="Permalink to &quot;特点&quot;">​</a></h4><p>既包括声明式部分（<code>let</code>、<code>const</code>），也包括对象式部分（<code>var</code>、全局对象属性）。</p><h4 id="代码示例理解" tabindex="-1">代码示例理解 <a class="header-anchor" href="#代码示例理解" aria-label="Permalink to &quot;代码示例理解&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全局环境记录对象，整合了对象环境记录和声明式环境记录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GlobalEnvironmentRecord {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 对象环境记录部分</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    objectEnvironmentRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        baseObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: window,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以浏览器环境为例，关联全局对象window</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bindings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 用于存储内置全局属性、var声明变量、函数声明等相关绑定信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 声明式环境记录部分</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    declarativeEnvironmentRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bindings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 用于存储let、const等声明相关绑定信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 外部词法环境引用，全局环境下通常为null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerLexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>:::color3 只是在全局环境记录中，声明式环境记录记录了let const声明的标识符的绑定，并不是说，声明式环境记录只能记录let const的绑定。究其原因，是在全局环境记录的特殊性，全局代码中的声明都在全局对象中</p><p>:::</p><h3 id="函数环境记录" tabindex="-1">函数环境记录 <a class="header-anchor" href="#函数环境记录" aria-label="Permalink to &quot;函数环境记录&quot;">​</a></h3>`,9)),a("blockquote",null,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[214]||(s[214]=[i("A ")])),_:1}),s[252]||(s[252]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[215]||(s[215]=[i("Function Environment Record")])),_:1}),s[253]||(s[253]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-function-environment-records)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[216]||(s[216]=[i(" corresponds to the invocation of an ECMAScript ")])),_:1}),s[254]||(s[254]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[217]||(s[217]=[i("function object")])),_:1}),s[255]||(s[255]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#function-object)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[218]||(s[218]=[i(", and contains bindings for the top-level declarations within that function. It may establish a new ")])),_:1}),s[256]||(s[256]=i("`**")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[219]||(s[219]=[i("this")])),_:1}),s[257]||(s[257]=i("**`")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[220]||(s[220]=[i(" binding. It also captures the state necessary to support ")])),_:1}),s[258]||(s[258]=i("`**")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[221]||(s[221]=[i("super")])),_:1}),s[259]||(s[259]=i("**`")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[222]||(s[222]=[i(" method invocations.")])),_:1}),a("p",null,[a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[223]||(s[223]=[i("函数环境记录")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[224]||(s[224]=[i("与 ECMAScript ")])),_:1}),a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[225]||(s[225]=[i("函数对象的")])),_:1}),s[227]||(s[227]=i("****")),l(n,{style:{color:"rgb(36, 43, 52)","background-color":"#FBDE28"}},{default:t(()=>s[226]||(s[226]=[i("调用")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[228]||(s[228]=[i("相对应，并包含该")])),_:1}),a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[229]||(s[229]=[i("函数中顶层声明")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[230]||(s[230]=[i("的绑定。 它可以建立新的this绑定。 它还能捕捉支持super方法调用所需的状态")])),_:1})]),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[231]||(s[231]=[i("A Function Environment Record is a ")])),_:1}),s[260]||(s[260]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[232]||(s[232]=[i("Declarative Environment Record")])),_:1}),s[261]||(s[261]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-declarative-environment-records)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[233]||(s[233]=[i(" that is used to represent the top-level scope of a function and, if the function is not an ")])),_:1}),s[262]||(s[262]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[234]||(s[234]=[i("ArrowFunction")])),_:1}),s[263]||(s[263]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-ArrowFunction)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[235]||(s[235]=[i(", provides a ")])),_:1}),s[264]||(s[264]=i("`**")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[236]||(s[236]=[i("this")])),_:1}),s[265]||(s[265]=i("**`")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[237]||(s[237]=[i(" binding. If a function is not an ")])),_:1}),s[266]||(s[266]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[238]||(s[238]=[i("ArrowFunction")])),_:1}),s[267]||(s[267]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-ArrowFunction)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[239]||(s[239]=[i(" function and references ")])),_:1}),s[268]||(s[268]=i("`**")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[240]||(s[240]=[i("super")])),_:1}),s[269]||(s[269]=i("**`")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[241]||(s[241]=[i(", its Function Environment Record also contains the state that is used to perform ")])),_:1}),s[270]||(s[270]=i("`**")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[242]||(s[242]=[i("super")])),_:1}),s[271]||(s[271]=i("**`")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[243]||(s[243]=[i(" method invocations from within the function.")])),_:1}),a("p",null,[a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[244]||(s[244]=[i("函数环境记录")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[245]||(s[245]=[i("（Function Environment Record）")])),_:1}),a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[246]||(s[246]=[i("是")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[247]||(s[247]=[i("一种")])),_:1}),a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[248]||(s[248]=[i("声明式环境记录")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[249]||(s[249]=[i("，用于表示")])),_:1}),a("strong",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[250]||(s[250]=[i("函数的顶层作用域")])),_:1})]),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[251]||(s[251]=[i("，如果函数不是 ArrowFunction(箭头函数) ，则提供this绑定。 如果函数不是 ArrowFunction 并引用了 super，那么其函数环境记录还包含用于在函数内部执行 super 方法调用的状态。")])),_:1})])]),s[375]||(s[375]=e(`<h4 id="理解" tabindex="-1">理解： <a class="header-anchor" href="#理解" aria-label="Permalink to &quot;理解：&quot;">​</a></h4><p>函数执行时创建该函数的函数环境记录</p><h4 id="特点-3" tabindex="-1">特点 <a class="header-anchor" href="#特点-3" aria-label="Permalink to &quot;特点&quot;">​</a></h4><ul><li><strong>参数和局部变量</strong>：存储在函数环境记录中。</li><li><code>**this**</code>** **：绑定，支持访问函数的上下文。</li></ul><h4 id="代码示例-2" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例-2" aria-label="Permalink to &quot;代码示例&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>当foo执行时，创建函数环境记录</li><li>这个记录中存储着o,p,b,bar的映射</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Function Enviroment </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  outerEnv: Global</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  this: window</span></span></code></pre></div><ul><li>当bar执行时，创建bar函数环境记录</li><li>这个记录中存储着e</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Function Enviroment </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: foo Function Enviroment Record</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: window</span></span></code></pre></div>`,10)),a("h3",j,[s[273]||(s[273]=i("模块环境记录 ")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[272]||(s[272]=[i("Module Environment Records")])),_:1}),s[274]||(s[274]=i()),s[275]||(s[275]=a("a",{class:"header-anchor",href:"#模块环境记录-module-environment-records","aria-label":'Permalink to "模块环境记录 <font style="color:rgb(17, 17, 17);">Module Environment Records</font>"'},"​",-1))]),s[376]||(s[376]=a("p",null,"感觉用的很少，这里引用下官方介绍，就不展开记录了",-1)),a("blockquote",null,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[276]||(s[276]=[i("A Module Environment Record is a ")])),_:1}),s[281]||(s[281]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[277]||(s[277]=[i("Declarative Environment Record")])),_:1}),s[282]||(s[282]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-declarative-environment-records)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[278]||(s[278]=[i(" that is used to represent the outer scope of an ECMAScript ")])),_:1}),s[283]||(s[283]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[279]||(s[279]=[i("Module")])),_:1}),s[284]||(s[284]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-Module)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[280]||(s[280]=[i(".")])),_:1})]),s[377]||(s[377]=a("h2",{id:"总结环境记录",tabindex:"-1"},[i("总结环境记录 "),a("a",{class:"header-anchor",href:"#总结环境记录","aria-label":'Permalink to "总结环境记录"'},"​")],-1)),a("ol",null,[s[297]||(s[297]=a("li",null,"定义标识符与 变量&函数 的关联，当代码运行到需要获取某个标识符值的时候，会从环境记录中去拿",-1)),a("li",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[285]||(s[285]=[i("当")])),_:1}),s[295]||(s[295]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}}),s[296]||(s[296]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[286]||(s[286]=[i("遇到以下代码时，就会创建一个新的环境记录")])),_:1}),a("ul",null,[a("li",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[287]||(s[287]=[i("函数声明:")])),_:1}),l(n,{style:{color:"rgb(36, 41, 46)"}},{default:t(()=>s[288]||(s[288]=[i("最开始执行的")])),_:1}),s[291]||(s[291]=i("`")),l(n,{style:{color:"rgb(36, 41, 46)"}},{default:t(()=>s[289]||(s[289]=[i("script")])),_:1}),s[292]||(s[292]=i("`")),l(n,{style:{color:"rgb(36, 41, 46)"}},{default:t(()=>s[290]||(s[290]=[i("，以及普通的函数声明")])),_:1})]),a("li",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[293]||(s[293]=[i("{}块语句")])),_:1})]),a("li",null,[l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[294]||(s[294]=[i("try catch的catch块")])),_:1})])])]),s[298]||(s[298]=a("li",null,"每个环境记录都有[[outerEnv]]，根据outerEnv可以访问外部环境，形成链。当当前环境记录没有找到映射，会根据outerEnv从外部环境中寻找",-1))]),s[378]||(s[378]=a("p",null,":::color3 上文提到，执行上下文中的词法环境、变量环境的本质都是环境记录，那么他们之间的关系，怎么理解，又是怎么对应的",-1)),s[379]||(s[379]=a("p",null,":::",-1)),s[380]||(s[380]=a("h2",{id:"词法环境",tabindex:"-1"},[i("词法环境 "),a("a",{class:"header-anchor",href:"#词法环境","aria-label":'Permalink to "词法环境"'},"​")],-1)),a("blockquote",null,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[299]||(s[299]=[i("Identifies the ")])),_:1}),s[307]||(s[307]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[300]||(s[300]=[i("Environment Record")])),_:1}),s[308]||(s[308]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-environment-records)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[301]||(s[301]=[i(" used to resolve identifier references made by code within this ")])),_:1}),s[309]||(s[309]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[302]||(s[302]=[i("execution context")])),_:1}),s[310]||(s[310]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-execution-contexts)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[303]||(s[303]=[i(".")])),_:1}),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[304]||(s[304]=[i("标识环境记录，该环境记录被用来")])),_:1}),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[305]||(s[305]=[i("解析代码在此执行上下文中对标识符的引用。")])),_:1}),s[311]||(s[311]=i("**")),l(n,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:t(()=>s[306]||(s[306]=[i("用于解析代码中的标识符引用")])),_:1}),s[312]||(s[312]=i("**"))]),a("p",null,[a("strong",null,[l(n,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:t(()=>s[313]||(s[313]=[i("标识符解析：")])),_:1})])]),a("ul",null,[a("li",null,[l(n,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:t(()=>s[314]||(s[314]=[i("当代码引用某个标识符（例如变量名或函数名）时，JavaScript 引擎会通过当前执行上下文的 ")])),_:1}),s[318]||(s[318]=i("`")),l(n,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:t(()=>s[315]||(s[315]=[i("LexicalEnvironment")])),_:1}),s[319]||(s[319]=i("`")),l(n,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:t(()=>s[316]||(s[316]=[i(" 找到对应的 ")])),_:1}),s[320]||(s[320]=i("环境记录")),l(n,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:t(()=>s[317]||(s[317]=[i("，以解析该标识符。")])),_:1})])]),s[381]||(s[381]=a("p",null,":::color3 从ES2015 -> ES2024, 发现在从ES2021开始，Lexical Environments（有空格）的概念被取消了, 把原先的Lexical Environments 改为 Environments Record",-1)),s[382]||(s[382]=a("p",null,"--- 到此我才缓过来",-1)),s[383]||(s[383]=a("p",null,":::",-1)),s[384]||(s[384]=a("h2",{id:"变量环境",tabindex:"-1"},[i("变量环境 "),a("a",{class:"header-anchor",href:"#变量环境","aria-label":'Permalink to "变量环境"'},"​")],-1)),a("blockquote",null,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[321]||(s[321]=[i("Identifies the ")])),_:1}),s[332]||(s[332]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[322]||(s[322]=[i("Environment Record")])),_:1}),s[333]||(s[333]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-environment-records)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[323]||(s[323]=[i(" that holds bindings created by ")])),_:1}),s[334]||(s[334]=i("[_")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[324]||(s[324]=[i("VariableStatement")])),_:1}),s[335]||(s[335]=i("_](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#prod-VariableStatement)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[325]||(s[325]=[i("s within this ")])),_:1}),s[336]||(s[336]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[326]||(s[326]=[i("execution context")])),_:1}),s[337]||(s[337]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-execution-contexts)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[327]||(s[327]=[i(".")])),_:1}),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[328]||(s[328]=[i("用于标识环境记录，该环境记录保存由该执行上下文中的 VariableStatements 创建的绑定。")])),_:1}),a("p",null,[a("strong",null,[l(n,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:t(()=>s[329]||(s[329]=[i("用于保存由")])),_:1})]),s[331]||(s[331]=a("code",null,"**VariableStatements**",-1)),a("strong",null,[l(n,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:t(()=>s[330]||(s[330]=[i("（变量声明语句）创建的绑定")])),_:1})])])]),a("blockquote",null,[l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[338]||(s[338]=[i("The LexicalEnvironment and VariableEnvironment components of an execution context are always ")])),_:1}),s[345]||(s[345]=i("[")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[339]||(s[339]=[i("Environment Records")])),_:1}),s[346]||(s[346]=i("](https://262.ecma-international.org/15.0/index.html?_gl=1*qxsvcj*_ga*MzQwMjYwNjQxLjE3MzMyMDU5NjU.*_ga_TDCK4DWEPP*MTczMzIwNTk2NC4xLjEuMTczMzIwNzAxMC4wLjAuMA..#sec-environment-records)")),l(n,{style:{color:"rgb(17, 17, 17)"}},{default:t(()=>s[340]||(s[340]=[i(".")])),_:1}),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[341]||(s[341]=[i("执行上下文中的 LexicalEnvironment 和 VariableEnvironment 组件始终是")])),_:1}),s[347]||(s[347]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[342]||(s[342]=[i("环境记录")])),_:1}),s[348]||(s[348]=i("**")),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[343]||(s[343]=[i("。")])),_:1}),l(n,{style:{color:"rgb(36, 43, 52)"}},{default:t(()=>s[344]||(s[344]=[i("明确了：就是环境记录")])),_:1})]),s[385]||(s[385]=a("p",null,":::color2",-1)),s[386]||(s[386]=a("h2",{id:"怎么理解",tabindex:"-1"},[i("怎么理解 "),a("a",{class:"header-anchor",href:"#怎么理解","aria-label":'Permalink to "怎么理解"'},"​")],-1)),s[387]||(s[387]=a("p",null,"环境记录 ** 定义标识符 与 函数&变量的关联　**",-1)),s[388]||(s[388]=a("p",null,[i("词法环境 "),a("strong",null,"解析代码中标识符引用,如何解析？找对应的环境记录")],-1)),a("p",null,[s[351]||(s[351]=i("变量环境 ")),a("strong",null,[l(n,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:t(()=>s[349]||(s[349]=[i("保存由")])),_:1})]),s[352]||(s[352]=a("code",null,"**VariableStatements**",-1)),a("strong",null,[l(n,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:t(()=>s[350]||(s[350]=[i("（变量声明语句）创建的绑定，找对应的环境记录")])),_:1})])]),s[389]||(s[389]=e(`<p>那么可以理解 词法环境、变量环境 --&gt; 环境记录 --&gt; 找对应关系</p><p>:::</p><h2 id="代码辅助理解" tabindex="-1">代码辅助理解 <a class="header-anchor" href="#代码辅助理解" aria-label="Permalink to &quot;代码辅助理解&quot;">​</a></h2><h3 id="示例1" tabindex="-1">示例1 <a class="header-anchor" href="#示例1" aria-label="Permalink to &quot;示例1&quot;">​</a></h3><p>:::color3 先Mark 暂时只思考到这，后续境界上来持续更新</p><p>:::</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (我理解这是一个抽象的，比环境记录还抽象，自身并不是一个环境记录)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: DeclarativeEnvironmentRecord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: FunctionEnvironmentRecord  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    VariableEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: FunctionEnvironmentRecord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: FunctionEnvironmentRecord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  undefined</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 记录的是  标识符  变量的关联  (执行前)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionEnvironmentRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: GlobalEnvironmentRecord</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}  DeclarativeEnvironmentRecord</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: foo FunctionEnvironmentRecord</span></span></code></pre></div><p>我的理解：</p><ul><li>当foo函数执行，在执行前夕，会创建foo函数的FEC，在执行上下文中，词法环境、变量环境随之创建，与之对应的，函数环境记录也随之创建，所以我理解在foo执行前夕，创建的结构如下：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    VariableEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只是抽象，具体还得在环境记录中找</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // c之所以会在初始被创建，完全是因为var的声明提升，思考下等价代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionEnvironmentRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: GlobalEnvironmentRecord</span></span></code></pre></div><ul><li>当执行到 <code>var a = 1</code>，会找到变量环境中的a，进而找到函数环境记录中的a,将值改为1</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    VariableEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只是抽象，具体还得在环境记录中找</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // c之所以会在初始被创建，完全是因为var的声明提升，思考下等价代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionEnvironmentRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: GlobalEnvironmentRecord</span></span></code></pre></div><ul><li>继续执行到<code>let b = 2</code> ，会找到当前词法环境中b，进而找到函数环境记录中的b,将值改为2</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    VariableEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只是抽象，具体还得在环境记录中找</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // c之所以会在初始被创建，完全是因为var的声明提升，思考下等价代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionEnvironmentRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: GlobalEnvironmentRecord</span></span></code></pre></div><ul><li>继续执行到<code>console.log(c)</code> 会找到变量环境中c，进而找到函数环境中的c，此时的c是undefined</li><li>继续执行遇到了块{}, 会创建一个词法环境，以及块的声明式环境记录</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    VariableEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只是抽象，具体还得在环境记录中找</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // c之所以会在初始被创建，完全是因为var的声明提升，思考下等价代码</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}  DeclarativeEnvironmentRecord</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: foo FunctionEnvironmentRecord</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionEnvironmentRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: GlobalEnvironmentRecord</span></span></code></pre></div><ul><li>执行到 <code>var c = 3</code> ，找到变量环境中c，进而找到函数环境中的c赋值3</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    VariableEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只是抽象，具体还得在环境记录中找</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // c之所以会在初始被创建，完全是因为var的声明提升，思考下等价代码</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}  DeclarativeEnvironmentRecord</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: initialize</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: foo FunctionEnvironmentRecord</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionEnvironmentRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: GlobalEnvironmentRecord</span></span></code></pre></div><ul><li>继续执行到<code>let d = 4</code> 找到当前词法环境中的d,进而找到块的声明式环境记录中的d,赋值为4</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:      </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: DeclarativeEnvironmentRecord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  d  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:     </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: FunctionEnvironmentRecord  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    VariableEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只是抽象，具体还得在环境记录中找</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // c之所以会在初始被创建，完全是因为var的声明提升，思考下等价代码</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}  DeclarativeEnvironmentRecord</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: foo FunctionEnvironmentRecord</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionEnvironmentRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: GlobalEnvironmentRecord</span></span></code></pre></div><ul><li>继续执行到 <code>console.log(a)</code> ，a 从当前词法环境对应的环境记录中找，没找到，根据outerEnv，再找到 FunctionEnvironmentRecord中的a, 打印为1</li><li>继续执行到 <code>console.log(b)</code> ，会从当前词法环境对应的环境记录中寻找，没找到，会到环境记录的外层环境记录 - 函数环境记录中寻找，找到为2</li><li>{},执行完成后，会销毁块词法环境 以及 当时创建的块声明式环境记录</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:     </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: FunctionEnvironmentRecord  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    VariableEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只是抽象，具体还得在环境记录中找</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // c之所以会在初始被创建，完全是因为var的声明提升，思考下等价代码</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FunctionEnvironmentRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outerEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: GlobalEnvironmentRecord</span></span></code></pre></div><ul><li>继续执行<code>console.log(d)</code> ,会在当前的词法环境对应的环境记录中寻找，找不到，再去全局环境记录中寻找，找不到，报错</li><li>若无 <code>console.log(d)</code> 那么执行完成后，执行上下文以及对应的环境记录都会销毁</li></ul><h2 id="参考" tabindex="-1">参考： <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考：&quot;">​</a></h2><p>ECMAScript规范（2024）</p><p>ECMAScript规范（2015）ES6</p><p>Javascript忍者秘籍（第2版）</p><p><a href="https://juejin.cn/post/7118721446615973896#heading-2" target="_blank" rel="noreferrer">https://juejin.cn/post/7118721446615973896#heading-2</a></p><p>...</p>`,30))])}const B=r(d,[["render",v]]);export{N as __pageData,B as default};
