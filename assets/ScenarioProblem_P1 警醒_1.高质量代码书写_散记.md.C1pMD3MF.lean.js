import{_ as h,c as r,j as s,G as t,w as e,a as i,a4 as n,B as p,o as d}from"./chunks/framework.vOILIgLK.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ScenarioProblem/P1 警醒/1.高质量代码书写_散记.md","filePath":"ScenarioProblem/P1 警醒/1.高质量代码书写_散记.md"}'),o={name:"ScenarioProblem/P1 警醒/1.高质量代码书写_散记.md"};function k(g,a,u,E,b,y){const l=p("font");return d(),r("div",null,[s("blockquote",null,[t(l,{style:{color:"rgb(17, 17, 17)","background-color":"rgb(247, 247, 247)"}},{default:e(()=>a[0]||(a[0]=[i("It's just my methodology")])),_:1}),a[1]||(a[1]=i(" 持续更新"))]),a[33]||(a[33]=n(`<h2 id="书写命名约束" tabindex="-1">书写命名约束 <a class="header-anchor" href="#书写命名约束" aria-label="Permalink to &quot;书写命名约束&quot;">​</a></h2><h3 id="文件约束" tabindex="-1">文件约束 <a class="header-anchor" href="#文件约束" aria-label="Permalink to &quot;文件约束&quot;">​</a></h3><h4 id="文件结构" tabindex="-1">文件结构 <a class="header-anchor" href="#文件结构" aria-label="Permalink to &quot;文件结构&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  components</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> （通用组件，与业务无关，可被其他所有组件调用）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      index.tsx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  containers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> （容器组件，与业务深度耦合，可被页面组件调用）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Kitty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> （容器组件中的特有组件，不能与其他容器组件共享）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      index.tsx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    World</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      components</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      index.tsx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hooks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> （公共的 hooks）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> （页面组件，特定的页面，无复用性）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> （状态管理）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  services</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> （接口定义）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  utils</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> （工具类）</span></span></code></pre></div><h5 id="要求自己" tabindex="-1">要求自己 <a class="header-anchor" href="#要求自己" aria-label="Permalink to &quot;要求自己&quot;">​</a></h5><ol><li>一个组件一个样式文件，不要一个大样式文件包含很多子组件样式</li><li>对于新写文件要求自己加文件注释 control + cmd + i<br> 后来发现，会经常造成冲突（停用）</li><li><img src="https://cdn.nlark.com/yuque/0/2023/png/26456403/1686898105830-b8c94812-696b-4354-896a-0873b09bfad8.png" alt="" data-fancybox="gallery" loading="lazy"></li><li>文件命名 <ol><li>驼峰命名</li><li>组件名首字母大写</li></ol></li></ol><h3 id="命名风格约束" tabindex="-1">命名风格约束 <a class="header-anchor" href="#命名风格约束" aria-label="Permalink to &quot;命名风格约束&quot;">​</a></h3><table tabindex="0"><thead><tr><th>常量</th><th>HOME_PAGE</th><th>大写+下划线</th></tr></thead><tbody><tr><td>变量</td><td>homePage</td><td>驼峰</td></tr><tr><td>方法</td><td>onSubmit</td><td>驼峰</td></tr><tr><td>TS类型</td><td>CourseData</td><td>首字母大写+驼峰</td></tr><tr><td>css id</td><td>myCon</td><td>驼峰</td></tr><tr><td>css类名</td><td>home-page-con</td><td>小写+短横/驼峰</td></tr></tbody></table><h3 id="注释书写" tabindex="-1">注释书写 <a class="header-anchor" href="#注释书写" aria-label="Permalink to &quot;注释书写&quot;">​</a></h3><p>永远不要注释，除非你有充分的理由 -- 正确性？如何判断？</p><ol><li>自定义方法 control + cmd + T（插件koroFileHeader） 逻辑复杂方法注释</li><li>对于不能很快理清思路的代码 -- 加注释</li><li>存在todo任务，但目前不影响业务 -- 加注释</li><li>语义化不强的变量/值 -- 加注释 的让人明白用这个东西做了什么</li><li>...</li></ol><h2 id="javascript约束" tabindex="-1">javaScript约束 <a class="header-anchor" href="#javascript约束" aria-label="Permalink to &quot;javaScript约束&quot;">​</a></h2><h3 id="字符串拼接" tabindex="-1">字符串拼接 <a class="header-anchor" href="#字符串拼接" aria-label="Permalink to &quot;字符串拼接&quot;">​</a></h3><p>字符串拼接采用模版字符串\`\`可读性更好</p><h3 id="循环性能" tabindex="-1">循环性能 <a class="header-anchor" href="#循环性能" aria-label="Permalink to &quot;循环性能&quot;">​</a></h3><h4 id="双层循环-转map-单循环" tabindex="-1">双层循环 转Map - 单循环 <a class="header-anchor" href="#双层循环-转map-单循环" aria-label="Permalink to &quot;双层循环   转Map - 单循环&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arrMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [item.label, item]))</span></span></code></pre></div><h3 id="循环绑定事件" tabindex="-1">循环绑定事件 <a class="header-anchor" href="#循环绑定事件" aria-label="Permalink to &quot;循环绑定事件&quot;">​</a></h3><h4 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h4><p>对于同级多个元素同时绑定事件时，进行事件委托</p><h3 id="判断条件" tabindex="-1">判断条件 <a class="header-anchor" href="#判断条件" aria-label="Permalink to &quot;判断条件&quot;">​</a></h3><h5 id="" tabindex="-1">?? <a class="header-anchor" href="#" aria-label="Permalink to &quot;??&quot;">​</a></h5>`,22)),t(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>a[2]||(a[2]=[i("空值合并运算符")])),_:1}),s("blockquote",null,[t(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>a[3]||(a[3]=[i("只会在左边的表达式为 ")])),_:1}),a[8]||(a[8]=i("`")),t(l,{style:{color:"rgb(10, 191, 91)","background-color":"rgb(243, 245, 249)"}},{default:e(()=>a[4]||(a[4]=[i("null")])),_:1}),a[9]||(a[9]=i("`")),t(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>a[5]||(a[5]=[i(" 或者 ")])),_:1}),a[10]||(a[10]=i("`")),t(l,{style:{color:"rgb(10, 191, 91)","background-color":"rgb(243, 245, 249)"}},{default:e(()=>a[6]||(a[6]=[i("undefined")])),_:1}),a[11]||(a[11]=i("`")),t(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>a[7]||(a[7]=[i(" 时，返回右边")])),_:1})]),a[34]||(a[34]=n('<div class="language-sass vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sass</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ? </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ?? </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><h5 id="-1" tabindex="-1">!! <a class="header-anchor" href="#-1" aria-label="Permalink to &quot;!!&quot;">​</a></h5>',2)),t(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>a[12]||(a[12]=[i("两次逻辑非运算")])),_:1}),a[35]||(a[35]=n('<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true false</span></span></code></pre></div><h5 id="-2" tabindex="-1">&amp;&amp; <a class="header-anchor" href="#-2" aria-label="Permalink to &quot;&amp;&amp;&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前真与反后</span></span></code></pre></div><h5 id="-3" tabindex="-1">|| <a class="header-anchor" href="#-3" aria-label="Permalink to &quot;||&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前真或返前</span></span></code></pre></div><h5 id="-4" tabindex="-1">?. <a class="header-anchor" href="#-4" aria-label="Permalink to &quot;?.&quot;">​</a></h5>',6)),t(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>a[13]||(a[13]=[i("可选链运算符，用于访问一个可能为空或者未定义的对象的属性，如果对象为空或者未定义，它会返回 ")])),_:1}),a[36]||(a[36]=i("`")),t(l,{style:{color:"rgb(10, 191, 91)","background-color":"rgb(243, 245, 249)"}},{default:e(()=>a[14]||(a[14]=[i("undefined")])),_:1}),a[37]||(a[37]=i("`")),t(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>a[15]||(a[15]=[i("，而不会抛出错误")])),_:1}),a[38]||(a[38]=n('<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj?.a</span></span></code></pre></div><h5 id="三元" tabindex="-1">三元 <a class="header-anchor" href="#三元" aria-label="Permalink to &quot;三元&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><h4 id="不做无用判断" tabindex="-1">不做无用判断 <a class="header-anchor" href="#不做无用判断" aria-label="Permalink to &quot;不做无用判断&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(checked.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> checked.value?.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span></code></pre></div><h3 id="函数封装" tabindex="-1">函数封装 <a class="header-anchor" href="#函数封装" aria-label="Permalink to &quot;函数封装&quot;">​</a></h3><h4 id="函数参数不宜太多" tabindex="-1">函数参数不宜太多 <a class="header-anchor" href="#函数参数不宜太多" aria-label="Permalink to &quot;函数参数不宜太多&quot;">​</a></h4><blockquote><p>tip: 参数太多时，还需要关心顺序...</p></blockquote><h4 id="函数拆分" tabindex="-1">函数拆分 <a class="header-anchor" href="#函数拆分" aria-label="Permalink to &quot;函数拆分&quot;">​</a></h4><blockquote><p>一个函数处理一个功能，</p><p>tips：当认为已经难以理解的时候，就是不得不拆的时候</p></blockquote><h4 id="函数封装-1" tabindex="-1">函数封装 <a class="header-anchor" href="#函数封装-1" aria-label="Permalink to &quot;函数封装&quot;">​</a></h4><blockquote><p>通用函数封装适当的，不要为了什么通用，兼容去无限处理参数</p></blockquote><h3 id="promise" tabindex="-1">promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;promise&quot;">​</a></h3><h4 id="promise-all使用要catch" tabindex="-1">promise.all使用要catch <a class="header-anchor" href="#promise-all使用要catch" aria-label="Permalink to &quot;promise.all使用要catch&quot;">​</a></h4><h4 id="await要考虑error" tabindex="-1">await要考虑error <a class="header-anchor" href="#await要考虑error" aria-label="Permalink to &quot;await要考虑error&quot;">​</a></h4><p>try catch / .catch / 兜底全局</p><h2 id="防御编程" tabindex="-1">防御编程 <a class="header-anchor" href="#防御编程" aria-label="Permalink to &quot;防御编程&quot;">​</a></h2><h3 id="展示时最好做默认值" tabindex="-1">展示时最好做默认值 <a class="header-anchor" href="#展示时最好做默认值" aria-label="Permalink to &quot;展示时最好做默认值&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{data.rate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;--&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这样的默认值</span></span></code></pre></div><h3 id="考虑弱网、无网的页面展示与交互" tabindex="-1">考虑弱网、无网的页面展示与交互 <a class="header-anchor" href="#考虑弱网、无网的页面展示与交互" aria-label="Permalink to &quot;考虑弱网、无网的页面展示与交互&quot;">​</a></h3><h3 id="考虑按钮的多次点击情况" tabindex="-1">考虑按钮的多次点击情况 <a class="header-anchor" href="#考虑按钮的多次点击情况" aria-label="Permalink to &quot;考虑按钮的多次点击情况&quot;">​</a></h3><h2 id="vue框架习惯" tabindex="-1">VUE框架习惯 <a class="header-anchor" href="#vue框架习惯" aria-label="Permalink to &quot;VUE框架习惯&quot;">​</a></h2>',22)),s("ol",null,[a[18]||(a[18]=s("li",null,"不要修改计算属性数据，能用计算属性数据的不要新建变量",-1)),a[19]||(a[19]=s("li",null,"定时器销毁",-1)),a[20]||(a[20]=s("li",null,"缓存复杂计算",-1)),a[21]||(a[21]=s("li",null,"懒加载",-1)),a[22]||(a[22]=s("li",null,"模态框销毁",-1)),s("li",null,[t(l,{style:{color:"rgb(47, 50, 56)"}},{default:e(()=>a[16]||(a[16]=[i("v if判断一定要是互斥的，不要来自不同的地方")])),_:1})]),s("li",null,[t(l,{style:{color:"rgb(47, 50, 56)"}},{default:e(()=>a[17]||(a[17]=[i("同一批子组件，数据源一定要用同一个，吃过亏")])),_:1})])]),a[39]||(a[39]=s("h2",{id:"工作中",tabindex:"-1"},[i("工作中 "),s("a",{class:"header-anchor",href:"#工作中","aria-label":'Permalink to "工作中"'},"​")],-1)),s("ol",null,[a[30]||(a[30]=s("li",null,[i("语义化 "),s("ol",null,[s("li",null,"起名字"),s("li",null,"长度很长的判断，尽量少用")])],-1)),a[31]||(a[31]=s("li",null,[i("复杂度 "),s("ol",null,[s("li",null,"少用双层循环")])],-1)),a[32]||(a[32]=s("li",null,"方法尽量单独定义，不要用行内方法",-1)),s("li",null,[a[26]||(a[26]=i("try catch 应用场景，不要滥用 ")),s("ol",null,[s("li",null,[t(l,{style:{color:"rgb(47, 50, 56)"}},{default:e(()=>a[23]||(a[23]=[i("无法控制上游给到的数据类型")])),_:1})]),s("li",null,[t(l,{style:{color:"rgb(47, 50, 56)"}},{default:e(()=>a[24]||(a[24]=[i("JSON.parse、localStorage 写等一些操作")])),_:1})]),s("li",null,[t(l,{style:{color:"rgb(47, 50, 56)"}},{default:e(()=>a[25]||(a[25]=[i("异常情况要给予处理，比如提示")])),_:1})])])]),s("li",null,[t(l,{style:{color:"rgb(47, 50, 56)"}},{default:e(()=>a[27]||(a[27]=[i("面条代码，尽量抽象成遍历或者map匹配的模式")])),_:1})]),s("li",null,[t(l,{style:{color:"rgb(47, 50, 56)"}},{default:e(()=>a[28]||(a[28]=[i("代码中code name相匹配的，尽量抽成对象使用")])),_:1})]),s("li",null,[t(l,{style:{color:"rgb(47, 50, 56)"}},{default:e(()=>a[29]||(a[29]=[i("同类型的，比如分页的那三个 可以写到一个对象中 reactive useState")])),_:1})])]),a[40]||(a[40]=s("h3",{id:"-5",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#-5","aria-label":'Permalink to ""'},"​")],-1))])}const v=h(o,[["render",k]]);export{m as __pageData,v as default};
